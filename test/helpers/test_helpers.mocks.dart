// Mocks generated by Mockito 5.4.4 from annotations
// in expense_manager/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i8;

import 'package:expense_manager/models/expense.dart' as _i14;
import 'package:expense_manager/models/logged_in_user.dart' as _i18;
import 'package:expense_manager/models/recurring_expense.dart' as _i15;
import 'package:expense_manager/services/app_authentication_service.dart'
    as _i11;
import 'package:expense_manager/services/drive_backup_service.dart' as _i13;
import 'package:expense_manager/services/encryption_service.dart' as _i19;
import 'package:expense_manager/services/storage_service.dart' as _i16;
import 'package:firebase_auth/firebase_auth.dart' as _i12;
import 'package:flutter/material.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;
import 'package:stacked/stacked.dart' as _i2;
import 'package:stacked_services/src/bottom_sheet/bottom_sheet_service.dart'
    as _i6;
import 'package:stacked_services/src/dialog/dialog_service.dart' as _i9;
import 'package:stacked_services/src/models/overlay_request.dart' as _i10;
import 'package:stacked_services/src/models/overlay_response.dart' as _i7;
import 'package:stacked_services/src/navigation/router_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRootStackRouter_0 extends _i1.SmartFake
    implements _i2.RootStackRouter {
  _FakeRootStackRouter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteData_1 extends _i1.SmartFake implements _i2.RouteData {
  _FakeRouteData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoutingController_2 extends _i1.SmartFake
    implements _i2.RoutingController {
  _FakeRoutingController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RouterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouterService extends _i1.Mock implements _i3.RouterService {
  @override
  _i2.RootStackRouter get router => (super.noSuchMethod(
        Invocation.getter(#router),
        returnValue: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
        returnValueForMissingStub: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
      ) as _i2.RootStackRouter);

  @override
  set router(_i2.RootStackRouter? _router) => super.noSuchMethod(
        Invocation.setter(
          #router,
          _router,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.StackedPage<dynamic>> get stack => (super.noSuchMethod(
        Invocation.getter(#stack),
        returnValue: <_i2.StackedPage<dynamic>>[],
        returnValueForMissingStub: <_i2.StackedPage<dynamic>>[],
      ) as List<_i2.StackedPage<dynamic>>);

  @override
  _i2.RouteData get topRoute => (super.noSuchMethod(
        Invocation.getter(#topRoute),
        returnValue: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
        returnValueForMissingStub: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
      ) as _i2.RouteData);

  @override
  dynamic setRouter(_i2.RootStackRouter? router) => super.noSuchMethod(
        Invocation.method(
          #setRouter,
          [router],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<dynamic> navigateTo(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<void> navigateToPath({
    required String? path,
    bool? includePrefixMatches = false,
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToPath,
          [],
          {
            #path: path,
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<T?> navigateWithTransition<T extends Object?>(
    _i5.Widget? widget, {
    _i5.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i4.Future<T?>.value(),
        returnValueForMissingStub: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);

  @override
  _i4.Future<T?> replaceWith<T extends Object?>(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i4.Future<T?>.value(),
        returnValueForMissingStub: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);

  @override
  _i4.Future<void> clearStackAndShow(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearStackAndShowView(
    _i5.Widget? widget, {
    _i5.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void popForced<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #popForced,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<bool> pop<T extends Object?>([T? result]) => (super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void back<T extends Object?>({T? result}) => super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {#result: result},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RoutingController topMostRouter({bool? ignorePagelessRoutes = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #topMostRouter,
          [],
          {#ignorePagelessRoutes: ignorePagelessRoutes},
        ),
        returnValue: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
        returnValueForMissingStub: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
      ) as _i2.RoutingController);

  @override
  _i4.Future<T?> pushNativeRoute<T extends Object?>(_i5.Route<T>? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNativeRoute,
          [route],
        ),
        returnValue: _i4.Future<T?>.value(),
        returnValueForMissingStub: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i6.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i6.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i7.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
    double? elevation = 1.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
            #elevation: elevation,
          },
        ),
        returnValue: _i4.Future<_i7.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i4.Future<_i7.SheetResponse<dynamic>?>.value(),
      ) as _i4.Future<_i7.SheetResponse<dynamic>?>);

  @override
  _i4.Future<_i7.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i8.Color? barrierColor = const _i8.Color(2315255808),
    double? elevation = 1.0,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #elevation: elevation,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i4.Future<_i7.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i4.Future<_i7.SheetResponse<T>?>.value(),
      ) as _i4.Future<_i7.SheetResponse<T>?>);

  @override
  void completeSheet(_i7.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i9.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i9.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i5.Widget Function(
      _i5.BuildContext,
      _i10.DialogRequest<dynamic>,
      dynamic Function(_i7.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i7.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i8.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i8.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i5.RouteSettings? routeSettings,
    _i5.GlobalKey<_i5.NavigatorState>? navigatorKey,
    _i9.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #routeSettings: routeSettings,
            #navigatorKey: navigatorKey,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i4.Future<_i7.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i4.Future<_i7.DialogResponse<dynamic>?>.value(),
      ) as _i4.Future<_i7.DialogResponse<dynamic>?>);

  @override
  _i4.Future<_i7.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i8.Color? barrierColor = const _i8.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    _i5.RouteSettings? routeSettings,
    _i5.GlobalKey<_i5.NavigatorState>? navigatorKey,
    _i5.RouteTransitionsBuilder? transitionBuilder,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #routeSettings: routeSettings,
            #navigatorKey: navigatorKey,
            #transitionBuilder: transitionBuilder,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i4.Future<_i7.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i4.Future<_i7.DialogResponse<T>?>.value(),
      ) as _i4.Future<_i7.DialogResponse<T>?>);

  @override
  _i4.Future<_i7.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i8.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i8.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i5.RouteSettings? routeSettings,
    _i9.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #routeSettings: routeSettings,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i4.Future<_i7.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i4.Future<_i7.DialogResponse<dynamic>?>.value(),
      ) as _i4.Future<_i7.DialogResponse<dynamic>?>);

  @override
  void completeDialog(_i7.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppAuthenticationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppAuthenticationService extends _i1.Mock
    implements _i11.AppAuthenticationService {
  @override
  bool get isSignedIn => (super.noSuchMethod(
        Invocation.getter(#isSignedIn),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<bool> checkGooglePlayServices() => (super.noSuchMethod(
        Invocation.method(
          #checkGooglePlayServices,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> expireToken() => (super.noSuchMethod(
        Invocation.method(
          #expireToken,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<({String? error, String? token})> checkAndRefreshToken() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkAndRefreshToken,
          [],
        ),
        returnValue: _i4.Future<({String? error, String? token})>.value(
            (error: null, token: null)),
        returnValueForMissingStub:
            _i4.Future<({String? error, String? token})>.value(
                (error: null, token: null)),
      ) as _i4.Future<({String? error, String? token})>);

  @override
  _i4.Future<_i12.UserCredential?> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i4.Future<_i12.UserCredential?>.value(),
        returnValueForMissingStub: _i4.Future<_i12.UserCredential?>.value(),
      ) as _i4.Future<_i12.UserCredential?>);

  @override
  _i4.Future<String?> getAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #getAccessToken,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [DriveBackupService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDriveBackupService extends _i1.Mock
    implements _i13.DriveBackupService {
  @override
  void initializeEncryption(String? userEmail) => super.noSuchMethod(
        Invocation.method(
          #initializeEncryption,
          [userEmail],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<String?> uploadFile({
    required String? accessToken,
    required String? fileName,
    required String? content,
    String? existingFileId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [],
          {
            #accessToken: accessToken,
            #fileName: fileName,
            #content: content,
            #existingFileId: existingFileId,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<Map<String, String?>> readFile({
    required String? accessToken,
    required String? fileId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readFile,
          [],
          {
            #accessToken: accessToken,
            #fileId: fileId,
          },
        ),
        returnValue:
            _i4.Future<Map<String, String?>>.value(<String, String?>{}),
        returnValueForMissingStub:
            _i4.Future<Map<String, String?>>.value(<String, String?>{}),
      ) as _i4.Future<Map<String, String?>>);

  @override
  _i4.Future<List<Map<String, String>>> listFiles({
    required String? accessToken,
    String? query,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listFiles,
          [],
          {
            #accessToken: accessToken,
            #query: query,
          },
        ),
        returnValue: _i4.Future<List<Map<String, String>>>.value(
            <Map<String, String>>[]),
        returnValueForMissingStub: _i4.Future<List<Map<String, String>>>.value(
            <Map<String, String>>[]),
      ) as _i4.Future<List<Map<String, String>>>);

  @override
  _i4.Future<Map<String, String?>> readFileByName({
    required String? accessToken,
    required String? fileName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readFileByName,
          [],
          {
            #accessToken: accessToken,
            #fileName: fileName,
          },
        ),
        returnValue:
            _i4.Future<Map<String, String?>>.value(<String, String?>{}),
        returnValueForMissingStub:
            _i4.Future<Map<String, String?>>.value(<String, String?>{}),
      ) as _i4.Future<Map<String, String?>>);

  @override
  dynamic logout({required String? accessToken}) => super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
          {#accessToken: accessToken},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<bool> backupData({
    required String? accessToken,
    required String? userEmail,
    required List<_i14.Expense>? expenses,
    required List<_i15.RecurringExpense>? recurringExpenses,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #backupData,
          [],
          {
            #accessToken: accessToken,
            #userEmail: userEmail,
            #expenses: expenses,
            #recurringExpenses: recurringExpenses,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>> restoreData({
    required String? accessToken,
    required String? userEmail,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreData,
          [],
          {
            #accessToken: accessToken,
            #userEmail: userEmail,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i16.StorageService {
  @override
  String get expensesBox => (super.noSuchMethod(
        Invocation.getter(#expensesBox),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#expensesBox),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.getter(#expensesBox),
        ),
      ) as String);

  @override
  String get recurringExpensesBox => (super.noSuchMethod(
        Invocation.getter(#recurringExpensesBox),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#recurringExpensesBox),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.getter(#recurringExpensesBox),
        ),
      ) as String);

  @override
  String get expenseNamesBox => (super.noSuchMethod(
        Invocation.getter(#expenseNamesBox),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#expenseNamesBox),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.getter(#expenseNamesBox),
        ),
      ) as String);

  @override
  String get loggedInUserBox => (super.noSuchMethod(
        Invocation.getter(#loggedInUserBox),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.getter(#loggedInUserBox),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.getter(#loggedInUserBox),
        ),
      ) as String);

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveExpense({
    required _i14.Expense? expense,
    bool? isBackup = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveExpense,
          [],
          {
            #expense: expense,
            #isBackup: isBackup,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> restoreExpenses(List<_i14.Expense>? expenses) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreExpenses,
          [expenses],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i14.Expense> getCurrentMonthExpenses() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentMonthExpenses,
          [],
        ),
        returnValue: <_i14.Expense>[],
        returnValueForMissingStub: <_i14.Expense>[],
      ) as List<_i14.Expense>);

  @override
  _i4.Future<List<_i14.Expense>> getAllExpenses() => (super.noSuchMethod(
        Invocation.method(
          #getAllExpenses,
          [],
        ),
        returnValue: _i4.Future<List<_i14.Expense>>.value(<_i14.Expense>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i14.Expense>>.value(<_i14.Expense>[]),
      ) as _i4.Future<List<_i14.Expense>>);

  @override
  _i4.Future<List<String>> getExpenseNames() => (super.noSuchMethod(
        Invocation.method(
          #getExpenseNames,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> saveRecurringExpense(_i15.RecurringExpense? expense) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveRecurringExpense,
          [expense],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateRecurringExpense(_i15.RecurringExpense? expense) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecurringExpense,
          [expense],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteRecurringExpense(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteRecurringExpense,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i15.RecurringExpense>> getRecurringExpenses() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecurringExpenses,
          [],
        ),
        returnValue: _i4.Future<List<_i15.RecurringExpense>>.value(
            <_i15.RecurringExpense>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i15.RecurringExpense>>.value(
                <_i15.RecurringExpense>[]),
      ) as _i4.Future<List<_i15.RecurringExpense>>);

  @override
  dynamic saveLoggedInUser({
    required _i12.User? user,
    required String? accessToken,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #saveLoggedInUser,
          [],
          {
            #user: user,
            #accessToken: accessToken,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i18.LoggedInUser?> getLoggedInUser() => (super.noSuchMethod(
        Invocation.method(
          #getLoggedInUser,
          [],
        ),
        returnValue: _i4.Future<_i18.LoggedInUser?>.value(),
        returnValueForMissingStub: _i4.Future<_i18.LoggedInUser?>.value(),
      ) as _i4.Future<_i18.LoggedInUser?>);

  @override
  void deleteExpense(_i14.Expense? expense) => super.noSuchMethod(
        Invocation.method(
          #deleteExpense,
          [expense],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> updateExpense({required _i14.Expense? expense}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateExpense,
          [],
          {#expense: expense},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>> getAllExpensesAsMap() => (super.noSuchMethod(
        Invocation.method(
          #getAllExpensesAsMap,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<void> restoreFromBackup({
    required List<_i14.Expense>? expenses,
    required List<_i15.RecurringExpense>? recurringExpenses,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreFromBackup,
          [],
          {
            #expenses: expenses,
            #recurringExpenses: recurringExpenses,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [EncryptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEncryptionService extends _i1.Mock implements _i19.EncryptionService {
  @override
  void initialize(String? userEmail) => super.noSuchMethod(
        Invocation.method(
          #initialize,
          [userEmail],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String encrypt(String? data) => (super.noSuchMethod(
        Invocation.method(
          #encrypt,
          [data],
        ),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #encrypt,
            [data],
          ),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #encrypt,
            [data],
          ),
        ),
      ) as String);

  @override
  String decrypt(String? encryptedData) => (super.noSuchMethod(
        Invocation.method(
          #decrypt,
          [encryptedData],
        ),
        returnValue: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #decrypt,
            [encryptedData],
          ),
        ),
        returnValueForMissingStub: _i17.dummyValue<String>(
          this,
          Invocation.method(
            #decrypt,
            [encryptedData],
          ),
        ),
      ) as String);
}
